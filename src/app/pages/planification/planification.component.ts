import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { TacheService, Tache, PrioriteTache, StatutTache } from '../../services/tache.service';
import { ProjetService, Projet } from '../../services/projet.service';
import { PlanificationService, Planification, EtatListe, CreatePlanificationDto, UserPermissions, UserForSelection } from '../../services/planification.service';
import { UtilisateurService, Utilisateur } from '../../services/utilisateur.service';
import { EquipeService, Equipe } from '../../services/equipe.service';
import { MembreEquipeService } from '../../services/membre-equipe.service';
import { AuthService } from '../../auth/auth.service';
import { ProfileService } from '../../services/profile.service';

import { NbToastrService } from '@nebular/theme';
import { forkJoin, Observable } from 'rxjs';
import { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';

interface UserInfo {
  id: number;
  email: string;
  nom: string;
  prenom: string;
  picture?: string;
}

@Component({
  selector: 'ngx-planification',
  templateUrl: './planification.component.html',
  styleUrls: ['./planification.component.scss']
})
export class PlanificationComponent implements OnInit {
  projets: Projet[] = [];
  taches: Tache[] = [];
  planifications: Planification[] = [];
  utilisateurs: Utilisateur[] = [];
  planificationForm: FormGroup;
  filterForm: FormGroup;
  loading = false;
  selectedDate: Date = new Date();
  heureDebut: string = '08:00';
  heureFin: string = '09:00';
  description: string = '';
  selectedTache: number | null = null;
  statuts: StatutTache[] = [StatutTache.EnCours, StatutTache.Terminee, StatutTache.Annulee];
  searchQuery: string = '';
  selectedProjet: number | null = null;
  StatutTache = StatutTache;
  EtatListe = EtatListe;
  
  // Propri√©t√©s pour le mode √©dition
  isEditMode = false;
  editingPlanification: Planification | null = null;

  // Propri√©t√©s pour l'utilisateur connect√©
  currentUser: UserInfo | null = null;
  currentUserEquipe: Equipe | null = null;
  
  // üëë Propri√©t√©s pour l'interface admin
  isAdmin: boolean = false;
  selectedUserId: number | null = null;
  availableUsers: Utilisateur[] = [];
  userTeams: Map<number, string> = new Map(); // Cache des √©quipes par utilisateur
  filteredUsers: Utilisateur[] = [];
  userSearchQuery: string = '';
  adminStats: any = null;



  constructor(
    private formBuilder: FormBuilder,
    public tacheService: TacheService,
    private projetService: ProjetService,
    private planificationService: PlanificationService,
    private utilisateurService: UtilisateurService,
    private equipeService: EquipeService,
    private membreEquipeService: MembreEquipeService,
    private authService: AuthService,
    private toastrService: NbToastrService,
    private profileService: ProfileService
  ) {
    this.initForm();
    this.initFilterForm();
  }

  ngOnInit() {
    console.log('üîç DEBUT DIAGNOSTIC UTILISATEUR');
    
    // R√©cup√©rer l'utilisateur depuis le token JWT du bon AuthService
    const token = this.authService.getToken();
    console.log('üì± Token depuis AuthService:', token ? 'Pr√©sent' : 'Absent');
    
    if (token) {
      try {
        // D√©coder le token pour r√©cup√©rer les informations utilisateur
        const tokenData = JSON.parse(atob(token.split('.')[1]));
        console.log('üîç Donn√©es du token:', tokenData);
        
        const userId = tokenData.nameid;
        console.log('üîë User ID depuis token:', userId);

        // V√©rifier si l'utilisateur est admin depuis le token
        this.isAdmin = tokenData.role === 'Admin' || tokenData.role?.includes('Admin');
        console.log('üëë Est administrateur (depuis token):', this.isAdmin);
        
        if (userId) {
          // R√©cup√©rer le profil complet depuis l'API
          this.profileService.getUserProfile(parseInt(userId)).subscribe({
            next: (user) => {
              console.log('‚úÖ Utilisateur r√©cup√©r√© via ProfileService:', user);
              if (user) {
                this.currentUser = {
                  id: user.id,
                  email: user.email,
                  nom: user.nom,
                  prenom: user.prenom,
                  picture: user.profilePhotoUrl
                };
                console.log('üë§ Utilisateur connect√© confirm√©:', this.currentUser);
                // Charger les donn√©es n√©cessaires
                this.loadProjets();
                this.loadUtilisateurs();
                
                // üëë Si admin, charger tous les utilisateurs pour la s√©lection
                if (this.isAdmin) {
                  this.loadAllUsersForAdmin();
                }
                
                this.loadPlanificationsByDate();
                this.loadUserEquipe();
              } else {
                console.log('‚ö†Ô∏è Profil utilisateur null, utilisation des donn√©es du token');
                this.fallbackToTokenData(tokenData, userId);
              }
            },
            error: (error) => {
              console.error('‚ùå Erreur lors de la r√©cup√©ration via ProfileService:', error);
                              // Fallback avec les donn√©es du token
                this.fallbackToTokenData(tokenData, userId);
                
                // üëë Si admin, charger tous les utilisateurs pour la s√©lection
                if (this.isAdmin) {
                  this.loadAllUsersForAdmin();
                }
            }
          });
          return;
        }
      } catch (error) {
        console.error('‚ùå Erreur lors du d√©codage du token:', error);
      }
    }
    
    // Aucun token ou token invalide
    console.log('‚ùå Aucun utilisateur trouv√©. Redirection n√©cessaire vers la page de connexion.');
    this.toastrService.danger('Session expir√©e. Veuillez vous reconnecter.', 'Erreur');
    return;
  }

  private initFilterForm() {
    this.filterForm = this.formBuilder.group({
      dateDebut: [new Date()],
      dateEcheance: [new Date()],
      projet: [''],
      description: ['']
    });
  }

  private initForm() {
    this.planificationForm = this.formBuilder.group({
      projetId: ['', Validators.required],
      tacheId: ['', Validators.required],
      description: [''],
      date: [new Date(), Validators.required],
      heureDebut: ['08:00', Validators.required],
      heureFin: ['09:00', Validators.required]
    });

    // Suppression du listener pour garder le filtrage par √©quipe
    /*
    this.planificationForm.get('projetId')?.valueChanges.subscribe(projetId => {
      if (projetId) {
        this.loadTachesProjet(projetId);
      } else {
        this.taches = [];
      }
    });
    */
  }

  onProjetChange(projetId: number) {
    console.log('üéØ onProjetChange appel√© avec projetId:', projetId);
    if (projetId) {
      this.selectedProjet = projetId;
      this.planificationForm.patchValue({ projetId: projetId });
      console.log('üìù selectedProjet mis √† jour:', this.selectedProjet);
      // Ne plus recharger les t√¢ches ici car on veut garder le filtrage par √©quipe
      console.log('‚ÑπÔ∏è Les t√¢ches restent filtr√©es par √©quipe');
    } else {
      console.log('‚ö†Ô∏è Aucun projet s√©lectionn√©');
      this.selectedProjet = null;
      this.planificationForm.patchValue({ projetId: null });
      // On garde les t√¢ches de l'√©quipe m√™me sans projet s√©lectionn√©
    }
  }

  onTacheChange(tacheId: number) {
    console.log('üéØ onTacheChange appel√© avec tacheId:', tacheId);
    this.selectedTache = tacheId;
    this.planificationForm.patchValue({ tacheId: tacheId });
    console.log('üìù selectedTache mis √† jour:', this.selectedTache);
  }

  onSearch() {
    if (this.searchQuery) {
      const searchLower = this.searchQuery.toLowerCase();
      this.taches = this.taches.filter(tache => 
        tache.titre.toLowerCase().includes(searchLower) ||
        tache.description?.toLowerCase().includes(searchLower)
      );
    } else if (this.selectedProjet) {
      this.loadTachesProjet(this.selectedProjet);
    }
  }

  openAddForm() {
    console.log("Ouverture du formulaire d'ajout");
  }

  getPlanificationsByEtat(etat: EtatListe): Planification[] {
    return this.planifications.filter(planification => planification.listeId === etat);
  }

  getStatusClass(statut: StatutTache): string {
    switch (statut) {
      case StatutTache.EnCours:
        return 'status-en-cours';
      case StatutTache.Terminee:
        return 'status-terminee';
      case StatutTache.Annulee:
        return 'status-annulee';
      default:
        return '';
    }
  }

  getPriorityClass(priorite: PrioriteTache): string {
    switch (priorite) {
      case PrioriteTache.Faible:
        return 'priority-faible';
      case PrioriteTache.Moyenne:
        return 'priority-moyenne';
      case PrioriteTache.Elevee:
        return 'priority-elevee';
      default:
        return '';
    }
  }

  editPlanification(planification: Planification) {
    console.log('üìù √âdition de la planification:', planification);
    
    this.isEditMode = true;
    this.editingPlanification = planification;
    
    // Pr√©-remplir le formulaire avec les donn√©es existantes
    this.selectedDate = new Date(planification.date);
    this.heureDebut = planification.heureDebut;
    this.heureFin = planification.heureFin;
    this.description = planification.description || '';
    this.selectedProjet = planification.projetId;
    this.selectedTache = planification.tacheId;
    
    // Mettre √† jour le formulaire
    this.planificationForm.patchValue({
      projetId: planification.projetId,
      tacheId: planification.tacheId,
      date: new Date(planification.date),
      heureDebut: planification.heureDebut,
      heureFin: planification.heureFin,
      description: planification.description || ''
    });
    
    // Charger les t√¢ches du projet si n√©cessaire
    if (planification.projetId) {
      this.loadAllTaches();
    }
    
    this.toastrService.info('Mode √©dition activ√©', 'Information');
  }

  cancelEdit() {
    this.isEditMode = false;
    this.editingPlanification = null;
    this.resetForm();
    this.toastrService.info('√âdition annul√©e', 'Information');
  }

  deletePlanification(planification: Planification) {
    if (confirm(`√ätes-vous s√ªr de vouloir supprimer cette planification ?`)) {
      this.planificationService.deletePlanification(planification.id!).subscribe({
        next: () => {
          console.log('‚úÖ Planification supprim√©e:', planification.id);
          this.toastrService.success('Planification supprim√©e avec succ√®s', 'Succ√®s');
          
          // Retirer de la liste locale
          this.planifications = this.planifications.filter(p => p.id !== planification.id);
        },
        error: (error) => {
          console.error('‚ùå Erreur lors de la suppression:', error);
          
          // Fallback: suppression locale
          console.log('üõ†Ô∏è API non disponible, suppression locale...');
          this.planifications = this.planifications.filter(p => p.id !== planification.id);
          this.toastrService.success('Planification supprim√©e localement', 'Succ√®s');
        }
      });
    }
  }

  updateStatut(planification: Planification, nouvelEtat: EtatListe) {
    const ancienEtat = planification.listeId;
    console.log(`üîÑ Mise √† jour du statut de la planification ${planification.id} : ${ancienEtat} ‚Üí ${nouvelEtat}`);
    
    // Mise √† jour optimiste (locale)
    planification.listeId = nouvelEtat;
    
    // üîç V√©rifier si c'est une t√¢che report√©e (sans ID)
    if (!planification.id) {
      console.log('üìù T√¢che report√©e d√©tect√©e - cr√©ation d\'une nouvelle planification');
      this.creerPlanificationPourTacheReportee(planification, nouvelEtat);
      return;
    }
    
    this.planificationService.updatePlanificationStatus(planification.id, nouvelEtat).subscribe({
      next: (updatedPlanification) => {
        console.log('‚úÖ Statut mis √† jour avec succ√®s:', updatedPlanification);
        
        // Mettre √† jour l'objet local avec la r√©ponse du serveur
        const index = this.planifications.findIndex(p => p.id === planification.id);
        if (index !== -1) {
          this.planifications[index] = { ...this.planifications[index], ...updatedPlanification };
        }
        
        this.toastrService.success(
          `Statut chang√© vers "${this.getEtatLabel(nouvelEtat)}"`, 
          'Succ√®s'
        );
      },
      error: (error) => {
        console.error('‚ùå Erreur lors de la mise √† jour du statut:', error);
        
        // Revenir en arri√®re en cas d'erreur
        planification.listeId = ancienEtat;
        
        this.toastrService.danger(
          'Erreur lors de la mise √† jour du statut', 
          'Erreur'
        );
      }
    });
  }

  private getEtatLabel(etat: EtatListe): string {
    switch (etat) {
      case EtatListe.Todo:
        return 'To Do';
      case EtatListe.EnCours:
        return 'En Cours';
      case EtatListe.Test:
        return 'Test';
      case EtatListe.Termine:
        return 'Termin√©';
      default:
        return 'Inconnu';
    }
  }

  loadProjets() {
    this.projetService.getProjets().subscribe({
      next: (projets) => {
        this.projets = projets;
        console.log('‚úÖ Projets charg√©s:', projets.length);
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement des projets:', error);
      }
    });
  }

  loadAllTaches() {
    console.log('üîç DEBUT loadAllTaches()');
    console.log('üîç currentUserEquipe:', this.currentUserEquipe);
    
    // Charger les t√¢ches de l'√©quipe de l'utilisateur connect√©
    if (this.currentUserEquipe && this.currentUserEquipe.idEquipe && this.currentUserEquipe.idEquipe !== undefined) {
      console.log('üìã Chargement des t√¢ches pour l\'√©quipe:', this.currentUserEquipe.nom);
      console.log('üîç ID de l\'√©quipe:', this.currentUserEquipe.idEquipe);
      this.tacheService.getTachesByEquipe(this.currentUserEquipe.idEquipe).subscribe({
        next: (taches) => {
          console.log('‚úÖ T√¢ches de l\'√©quipe charg√©es:', taches.length);
          console.log('üìã D√©tail des t√¢ches re√ßues:', taches);
          this.taches = taches;
          console.log('üìã T√¢ches disponibles pour l\'√©quipe:', this.taches.length);
          
          // Si aucune t√¢che n'est trouv√©e pour l'√©quipe, afficher un message informatif
          if (taches.length === 0) {
            this.toastrService.info(
              `Aucune t√¢che trouv√©e pour l'√©quipe "${this.currentUserEquipe?.nom}". Vous pouvez en cr√©er dans la section T√¢ches.`,
              'Aucune t√¢che'
            );
          }
        },
        error: (error) => {
          console.error('‚ùå Erreur lors du chargement des t√¢ches de l\'√©quipe:', error);
          console.error('üîç Statut de l\'erreur:', error.status);
          console.error('üîç Message d\'erreur:', error.message);
          
          // Fallback temporaire pour le d√©bogage : charger toutes les t√¢ches
          console.log('üîÑ FALLBACK TEMPORAIRE: chargement de toutes les t√¢ches pour d√©bogage');
          this.loadAllTachesForDebugging();
        }
      });
    } else {
      console.log('‚ö†Ô∏è Aucune √©quipe d√©finie pour l\'utilisateur ou ID √©quipe undefined');
      console.log('üîç currentUserEquipe:', this.currentUserEquipe);
      console.log('üîç idEquipe:', this.currentUserEquipe?.idEquipe);
      
      // Fallback temporaire pour le d√©bogage : charger toutes les t√¢ches
      console.log('üîÑ FALLBACK TEMPORAIRE: chargement de toutes les t√¢ches car pas d\'√©quipe valide');
      this.loadAllTachesForDebugging();
    }
  }

  private loadAllTachesForDebugging() {
    console.log('üîß D√âBOGAGE: Chargement de toutes les t√¢ches');
    this.tacheService.getTaches().subscribe({
      next: (taches) => {
        console.log('üìã D√âBOGAGE: Toutes les t√¢ches charg√©es:', taches.length);
        console.log('üìã D√âBOGAGE: D√©tail des t√¢ches:', taches);
        this.taches = taches;
        
        this.toastrService.warning(
          `Mode d√©bogage: ${taches.length} t√¢ches charg√©es (toutes √©quipes confondues). V√©rifiez l'assignation √† l'√©quipe.`,
          'Mode d√©bogage'
        );
      },
      error: (error) => {
        console.error('‚ùå D√âBOGAGE: Erreur lors du chargement de toutes les t√¢ches:', error);
        this.taches = [];
        this.toastrService.danger(
          'Impossible de charger les t√¢ches. V√©rifiez la connexion au serveur.',
          'Erreur de connexion'
        );
      }
    });
  }

  private loadAllTachesAsFallback() {
    // Rediriger vers la m√©thode de d√©bogage
    console.warn('‚ö†Ô∏è loadAllTachesAsFallback appel√©e - redirection vers d√©bogage');
    this.loadAllTachesForDebugging();
  }

  loadTachesProjet(projetId: number) {
    // Respecter le filtrage par √©quipe m√™me lors de la s√©lection d'un projet
    // Les t√¢ches affich√©es doivent toujours √™tre celles de l'√©quipe de l'utilisateur
    console.log('üéØ Projet s√©lectionn√©:', projetId, '- Maintien du filtrage par √©quipe');
    // Ne pas recharger les t√¢ches, garder celles de l'√©quipe
    // this.loadAllTaches(); // Comment√© pour √©viter le rechargement
  }

  private loadAllTachesAndFilter(projetId: number) {
    // Respecter le filtrage par √©quipe m√™me lors du filtrage par projet
    // Les t√¢ches affich√©es doivent toujours √™tre celles de l'√©quipe de l'utilisateur
    console.log('üéØ Filtrage par projet:', projetId, '- Maintien du filtrage par √©quipe');
    // Ne pas recharger les t√¢ches, garder celles de l'√©quipe
    // this.loadAllTaches(); // Comment√© pour √©viter le rechargement
  }

  // ===== M√âTHODE AVEC PERSISTANCE DES T√ÇCHES =====
  loadPlanificationsByDate() {
    if (!this.currentUser) {
      return;
    }

    this.loading = true;
    
    // Correction du probl√®me de fuseau horaire
    const year = this.selectedDate.getFullYear();
    const month = String(this.selectedDate.getMonth() + 1).padStart(2, '0');
    const day = String(this.selectedDate.getDate()).padStart(2, '0');
    const dateStr = `${year}-${month}-${day}`;
    
    // üëë D√©terminer quel utilisateur utiliser (admin ou utilisateur connect√©)
    const targetUserId = this.getCurrentViewUserId();
    
    console.log('üîç Chargement des planifications pour la date:', dateStr);
    console.log('üë§ Utilisateur cible:', targetUserId);
    console.log('üëë Mode admin:', this.isAdmin);
    
    // 1Ô∏è‚É£ Charger les planifications du jour s√©lectionn√©
    const planificationsJour = this.planificationService.getPlanificationsByUserAndDate(targetUserId, dateStr);
    
    // 2Ô∏è‚É£ Charger les t√¢ches non termin√©es des jours pr√©c√©dents
    const tachesEnCours = this.loadTachesEnCoursFromPreviousDays(dateStr);
    
    // 3Ô∏è‚É£ Combiner les deux
    forkJoin({
      planificationsJour: planificationsJour,
      tachesEnCours: tachesEnCours
    }).subscribe({
      next: (result) => {
        console.log('‚úÖ Planifications du jour:', result.planificationsJour.length);
        console.log('‚úÖ T√¢ches en cours des jours pr√©c√©dents:', result.tachesEnCours.length);
        
        // Combiner les planifications en √©vitant les doublons
        const planificationsCompletes = this.combinerPlanifications(
          result.planificationsJour, 
          result.tachesEnCours, 
          dateStr
        );
        
        this.planifications = planificationsCompletes;
        console.log('üéØ Total planifications affich√©es:', this.planifications.length);
        
        this.loading = false;
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement des planifications:', error);
        // Fallback : charger seulement les planifications du jour
        this.planificationService.getPlanificationsByUserAndDate(targetUserId, dateStr).subscribe({
          next: (planifications) => {
            this.planifications = planifications;
            this.loading = false;
          },
          error: (fallbackError) => {
            console.error('‚ùå Erreur fallback:', fallbackError);
            this.planifications = [];
            this.loading = false;
          }
        });
      }
    });
  }

  onDateChange(date: Date) {
    this.selectedDate = date;
    this.loadPlanificationsByDate();
  }

  onSubmit() {
    if (!this.planificationForm.valid) {
      console.log('‚ùå Formulaire invalide:', this.getFormErrors());
      this.toastrService.danger('Veuillez remplir tous les champs requis', 'Formulaire invalide');
      return;
    }

    if (!this.selectedTache || !this.selectedProjet) {
      this.toastrService.danger('Veuillez s√©lectionner un projet et une t√¢che', 'S√©lection manquante');
      return;
    }

    // Validation des heures
    const debut = this.parseTime(this.heureDebut);
    const fin = this.parseTime(this.heureFin);
    
    if (debut >= fin) {
      this.toastrService.danger('L\'heure de fin doit √™tre post√©rieure √† l\'heure de d√©but', 'Horaire invalide');
      return;
    }

    // Correction du probl√®me de fuseau horaire
    const year = this.selectedDate.getFullYear();
    const month = String(this.selectedDate.getMonth() + 1).padStart(2, '0');
    const day = String(this.selectedDate.getDate()).padStart(2, '0');
    const dateStr = `${year}-${month}-${day}`;

    if (this.isEditMode && this.editingPlanification) {
      this.updatePlanification(this.editingPlanification.id!, dateStr);
    } else {
      this.createPlanification(dateStr);
    }
  }

  private parseTime(timeStr: string): number {
    const [hours, minutes] = timeStr.split(':').map(Number);
    return hours * 60 + minutes;
  }

  // ===== M√âTHODE SIMPLIFI√âE POUR LA CR√âATION =====
  private createPlanification(dateStr: string) {
    if (!this.currentUser) {
      this.toastrService.danger('Utilisateur non connect√©', 'Erreur');
      return;
    }

    const planificationData: CreatePlanificationDto = {
      date: dateStr,
      heureDebut: this.heureDebut,
      heureFin: this.heureFin,
      description: this.description || '',
      tacheId: this.selectedTache!,
      projetId: this.selectedProjet!,
      listeId: EtatListe.Todo,
      userId: this.currentUser.id // Envoyer l'UserId
    };

    console.log('üì§ Cr√©ation d\'une nouvelle planification:', planificationData);

    this.planificationService.createPlanification(planificationData).subscribe({
      next: (planification) => {
        console.log('‚úÖ Planification cr√©√©e:', planification);
        this.toastrService.success('Planification cr√©√©e avec succ√®s', 'Succ√®s');
        this.resetForm();
        this.loadPlanificationsByDate();
      },
      error: (error) => {
        console.error('‚ùå Erreur lors de la cr√©ation:', error);
        this.toastrService.danger('Erreur lors de la cr√©ation de la planification', 'Erreur');
      }
    });
  }

  private updatePlanification(id: number, dateStr: string) {
    const updateData = {
      date: dateStr,
      heureDebut: this.heureDebut,
      heureFin: this.heureFin,
      description: this.description || '',
      tacheId: this.selectedTache!,
      projetId: this.selectedProjet!
    };

    console.log('üì§ Mise √† jour de la planification:', id, updateData);

    this.planificationService.updatePlanification(id, updateData).subscribe({
      next: (planificationMiseAJour) => {
        console.log('‚úÖ Planification mise √† jour:', planificationMiseAJour);
        this.toastrService.success('Planification modifi√©e avec succ√®s', 'Succ√®s');
        
        // Mettre √† jour la planification dans la liste locale
        const index = this.planifications.findIndex(p => p.id === id);
        if (index !== -1) {
          // Garder les informations li√©es (tache, projet) existantes
          this.planifications[index] = {
            ...this.planifications[index],
            ...updateData,
            id: id
          };
        }
        
        this.loadPlanificationsByDate();
        this.resetForm();
        this.isEditMode = false;
        this.editingPlanification = null;
      },
      error: (error) => {
        console.error('‚ùå Erreur lors de la mise √† jour:', error);
        console.log('üõ†Ô∏è API non disponible, mise √† jour locale...');
        
        // Fallback: mise √† jour locale
        const index = this.planifications.findIndex(p => p.id === id);
        if (index !== -1) {
          this.planifications[index] = {
            ...this.planifications[index],
            ...updateData,
            id: id
          };
          
          this.toastrService.success('Planification modifi√©e localement', 'Succ√®s');
          this.resetForm();
          this.isEditMode = false;
          this.editingPlanification = null;
        } else {
          this.toastrService.danger('Erreur lors de la modification', 'Erreur');
        }
      }
    });
  }

  private resetForm() {
    this.selectedProjet = null;
    this.selectedTache = null;
    this.heureDebut = '08:00';
    this.heureFin = '09:00';
    this.description = '';
    
    this.planificationForm.reset({
      projetId: '',
      tacheId: '',
      description: '',
      date: new Date(),
      heureDebut: '08:00',
      heureFin: '09:00'
    });
  }

  getFormErrors() {
    const errors: any = {};
    Object.keys(this.planificationForm.controls).forEach(key => {
      const control = this.planificationForm.get(key);
      if (control && !control.valid) {
        errors[key] = control.errors;
      }
    });
    return errors;
  }

  loadUtilisateurs() {
    this.utilisateurService.getUtilisateurs().subscribe({
      next: (utilisateurs) => {
        this.utilisateurs = utilisateurs;
        console.log('‚úÖ Utilisateurs charg√©s:', utilisateurs.length);
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement des utilisateurs:', error);
      }
    });
  }

  getAssignedUser(assigneId: number): Utilisateur | null {
    return this.utilisateurs.find(user => user.id === assigneId) || null;
  }

  getUserInitials(user: Utilisateur): string {
    const prenom = user.prenom || '';
    const nom = user.nom || '';
    return `${prenom.charAt(0)}${nom.charAt(0)}`.toUpperCase();
  }

  getUserColor(userId: number): string {
    const colors = ['#3366cc', '#dc3912', '#ff9900', '#109618', '#990099', '#0099c6', '#dd4477', '#66aa00', '#b82e2e', '#316395'];
    return colors[userId % colors.length];
  }

  private fallbackToTokenData(tokenData: any, userId: string) {
    this.currentUser = {
      id: parseInt(userId),
      email: tokenData.email || '',
      nom: tokenData.nom || '',
      prenom: tokenData.prenom || '',
      picture: null
    };
    console.log('üë§ Utilisateur depuis token (fallback):', this.currentUser);
    // Charger les donn√©es n√©cessaires
    this.loadProjets();
    this.loadUtilisateurs();
    this.loadPlanificationsByDate();
    this.loadUserEquipe();
  }

  loadUserEquipe() {
    if (this.currentUser) {
      console.log('üîç Recherche de l\'√©quipe pour l\'utilisateur:', this.currentUser.id);
      
      this.membreEquipeService.getMembres().subscribe({
        next: (membres) => {
          console.log('üìã Tous les membres r√©cup√©r√©s:', membres);
          console.log('üîç Premier membre (exemple):', JSON.stringify(membres[0], null, 2));
          
          // Essayer diff√©rentes fa√ßons de trouver l'utilisateur
          let membreUtilisateur = membres.find(m => m.utilisateurId === this.currentUser!.id);
          
          if (!membreUtilisateur) {
            // Essayer avec UtilisateurId (majuscule)
            membreUtilisateur = membres.find(m => (m as any).UtilisateurId === this.currentUser!.id);
          }
          
          if (!membreUtilisateur && (membres as any).some((m: any) => m.utilisateur)) {
            // Essayer via l'objet utilisateur imbriqu√©
            membreUtilisateur = membres.find(m => (m as any).utilisateur?.id === this.currentUser!.id);
          }
          
          console.log('üë§ Membre utilisateur trouv√©:', membreUtilisateur);
          console.log('üîç Structure compl√®te du membre:', JSON.stringify(membreUtilisateur, null, 2));
          
          if (membreUtilisateur && membreUtilisateur.equipe) {
            this.currentUserEquipe = {
              idEquipe: membreUtilisateur.equipe.idEquipe || (membreUtilisateur.equipe as any).id,
              nom: membreUtilisateur.equipe.nom,
              statut: 0 // Valeur par d√©faut
            };
            console.log('‚úÖ √âquipe de l\'utilisateur charg√©e:', this.currentUserEquipe);
            // Charger les t√¢ches de l'√©quipe maintenant qu'on a les infos
            this.loadAllTaches();
          } else if (membreUtilisateur && (membreUtilisateur as any).Equipe) {
            // Essayer avec Equipe (majuscule)
            const equipe = (membreUtilisateur as any).Equipe;
            this.currentUserEquipe = {
              idEquipe: equipe.IdEquipe || equipe.id || equipe.idEquipe,
              nom: equipe.Nom || equipe.nom,
              statut: 0
            };
            console.log('‚úÖ √âquipe de l\'utilisateur charg√©e (Majuscule):', this.currentUserEquipe);
            // Charger les t√¢ches de l'√©quipe maintenant qu'on a les infos
            this.loadAllTaches();
          } else if (membreUtilisateur && membreUtilisateur.equipeId) {
            // R√©cup√©rer l'√©quipe par son ID
            console.log('üîç R√©cup√©ration equipe avec ID:', membreUtilisateur.equipeId);
            this.equipeService.getEquipeForCrud(membreUtilisateur.equipeId).subscribe({
              next: (equipe) => {
                console.log('üîç √âquipe brute re√ßue de l\'API:', equipe);
                console.log('üîç Structure compl√®te de l\'√©quipe:', JSON.stringify(equipe, null, 2));
                
                // Essayer diff√©rentes propri√©t√©s pour l'ID
                let equipeId = (equipe as any).idEquipe || 
                              (equipe as any).id || 
                              (equipe as any).IdEquipe ||
                              membreUtilisateur.equipeId; // Fallback vers l'ID du membre
                
                console.log('üîç ID √©quipe extrait:', equipeId);
                
                this.currentUserEquipe = {
                  idEquipe: equipeId,
                  nom: (equipe as any).nom || (equipe as any).Nom || '√âquipe inconnue',
                  statut: 0
                };
                console.log('‚úÖ √âquipe r√©cup√©r√©e par ID:', this.currentUserEquipe);
                
                // V√©rifier que l'ID est bien d√©fini avant de charger les t√¢ches
                if (this.currentUserEquipe.idEquipe) {
                  console.log('‚úÖ ID √©quipe valide, chargement des t√¢ches');
                  this.loadAllTaches();
                } else {
                  console.error('‚ùå ID √©quipe toujours undefined apr√®s traitement');
                  console.log('üîÑ Utilisation de l\'ID du membre comme fallback');
                  this.currentUserEquipe.idEquipe = membreUtilisateur.equipeId;
                this.loadAllTaches();
                }
              },
              error: (error) => {
                console.error('‚ùå Erreur lors de la r√©cup√©ration √©quipe:', error);
                // Ne pas cr√©er d'√©quipe par d√©faut, laisser null
                this.currentUserEquipe = null;
                console.log('‚ö†Ô∏è Impossible de r√©cup√©rer l\'√©quipe, utilisateur sans √©quipe');
                // Charger les t√¢ches (qui sera une liste vide)
                this.loadAllTaches();
              }
            });
          } else {
            console.log('‚ö†Ô∏è Utilisateur non assign√© √† une √©quipe');
            console.log('üîç Structure du membre:', membreUtilisateur);
            
            // Ne pas cr√©er d'√©quipe par d√©faut
            this.currentUserEquipe = null;
            console.log('‚ö†Ô∏è Aucune √©quipe trouv√©e pour cet utilisateur');
            // Charger les t√¢ches (qui sera une liste vide)
            this.loadAllTaches();
          }
        },
        error: (error) => {
          console.error('‚ùå Erreur lors du chargement de l\'√©quipe:', error);
          
          // Ne pas cr√©er d'√©quipe par d√©faut en cas d'erreur
          this.currentUserEquipe = null;
          console.log('‚ùå Erreur API, utilisateur sans √©quipe');
          // Charger les t√¢ches (qui sera une liste vide)
          this.loadAllTaches();
        }
      });
    }
  }

  // üîÑ Charger les t√¢ches non termin√©es des jours pr√©c√©dents
  private loadTachesEnCoursFromPreviousDays(dateActuelle: string): Observable<Planification[]> {
    if (!this.currentUser) {
      return new Observable(observer => {
        observer.next([]);
        observer.complete();
      });
    }

    // üëë Utiliser l'utilisateur cible (admin ou utilisateur connect√©)
    const targetUserId = this.getCurrentViewUserId();
    
    console.log('üîç Recherche des t√¢ches en cours des jours pr√©c√©dents...');
    console.log('üë§ Pour l\'utilisateur:', targetUserId);
    
    // Calculer la date d'il y a 7 jours pour limiter la recherche
    const dateActuelleObj = new Date(dateActuelle);
    const dateLimite = new Date(dateActuelleObj);
    dateLimite.setDate(dateLimite.getDate() - 7);
    
    const dateLimiteStr = dateLimite.toISOString().split('T')[0];
    
    console.log('üìÖ Recherche entre', dateLimiteStr, 'et', dateActuelle);
    
    // Cr√©er un Observable qui recherche les planifications des 7 derniers jours
    return new Observable<Planification[]>(observer => {
      // Pour l'instant, on va chercher jour par jour (on pourrait optimiser avec une API d√©di√©e)
      const observables: Observable<Planification[]>[] = [];
      
      for (let i = 1; i <= 7; i++) {
        const dateRecherche = new Date(dateActuelleObj);
        dateRecherche.setDate(dateRecherche.getDate() - i);
        const dateRechercheStr = dateRecherche.toISOString().split('T')[0];
        
        observables.push(
          this.planificationService.getPlanificationsByUserAndDate(targetUserId, dateRechercheStr)
        );
      }
      
      // Ex√©cuter toutes les recherches en parall√®le
      forkJoin(observables).subscribe({
        next: (resultats) => {
          // Aplatir tous les r√©sultats
          const toutesLesPlanifications = resultats.reduce((acc, val) => acc.concat(val), []);
          
          // Filtrer seulement les t√¢ches non termin√©es (En cours, Todo, Test)
          const tachesNonTerminees = toutesLesPlanifications.filter(planif => 
            planif.listeId === EtatListe.EnCours || 
            planif.listeId === EtatListe.Todo || 
            planif.listeId === EtatListe.Test
          );
          
          console.log('üéØ T√¢ches non termin√©es trouv√©es:', tachesNonTerminees.length);
          observer.next(tachesNonTerminees);
          observer.complete();
        },
        error: (error) => {
          console.error('‚ùå Erreur lors de la recherche des t√¢ches pr√©c√©dentes:', error);
          observer.next([]);
          observer.complete();
        }
      });
    });
  }

  // üîÄ Combiner les planifications du jour avec les t√¢ches en cours pr√©c√©dentes
  private combinerPlanifications(
    planificationsJour: Planification[], 
    tachesEnCours: Planification[], 
    dateActuelle: string
  ): Planification[] {
    console.log('üîÄ Combinaison des planifications...');
    
    // 1Ô∏è‚É£ Commencer avec les planifications du jour
    const resultat = [...planificationsJour];
    
    // 2Ô∏è‚É£ Ajouter les t√¢ches en cours des jours pr√©c√©dents qui ne sont pas d√©j√† pr√©sentes
    tachesEnCours.forEach(tacheEnCours => {
      // V√©rifier si cette t√¢che n'est pas d√©j√† planifi√©e aujourd'hui
      const dejaPresente = resultat.some(planifJour => 
        planifJour.tacheId === tacheEnCours.tacheId
      );
      
      if (!dejaPresente) {
        // Cr√©er une nouvelle planification pour aujourd'hui avec la t√¢che en cours
        const nouvellePlanification: Planification = {
          ...tacheEnCours,
          id: undefined, // Nouvelle planification, pas d'ID
          date: dateActuelle, // Date d'aujourd'hui
          // Garder le statut actuel de la t√¢che
          listeId: tacheEnCours.listeId,
          // Optionnel : ajuster les horaires pour aujourd'hui
          heureDebut: tacheEnCours.heureDebut || '08:00',
          heureFin: tacheEnCours.heureFin || '09:00',
          description: `${tacheEnCours.description || ''} (Report√©e du ${tacheEnCours.date})`.trim()
        };
        
        resultat.push(nouvellePlanification);
        console.log(`‚ûï T√¢che report√©e: "${tacheEnCours.tache?.titre}" du ${tacheEnCours.date}`);
      } else {
        console.log(`‚è≠Ô∏è T√¢che d√©j√† planifi√©e aujourd'hui: "${tacheEnCours.tache?.titre}"`);
      }
    });
    
    console.log('‚úÖ Total apr√®s combinaison:', resultat.length);
    return resultat;
  }

  // üßπ Nettoyer la description pour supprimer les textes de pr√©diction IA ind√©sirables
  getCleanDescription(description: string | undefined): string | null {
    if (!description) return null;
    
    // Supprimer les textes de pr√©diction IA
    let cleanDescription = description
      .replace(/\(Dur√©e estim√©e IA:.*?\)/g, '') // Supprimer "(Dur√©e estim√©e IA: X minutes)"
      .replace(/Dur√©e estim√©e IA:.*$/gm, '') // Supprimer "Dur√©e estim√©e IA: X" en fin de ligne
      .trim();
    
    // Si la description devient vide apr√®s nettoyage, retourner null
    return cleanDescription.length > 0 ? cleanDescription : null;
  }

  // üìù Cr√©er une nouvelle planification pour une t√¢che report√©e
  private creerPlanificationPourTacheReportee(planification: Planification, nouvelEtat: EtatListe) {
    if (!this.currentUser) {
      this.toastrService.danger('Utilisateur non connect√©', 'Erreur');
      return;
    }

    // Correction du probl√®me de fuseau horaire pour la date actuelle
    const year = this.selectedDate.getFullYear();
    const month = String(this.selectedDate.getMonth() + 1).padStart(2, '0');
    const day = String(this.selectedDate.getDate()).padStart(2, '0');
    const dateStr = `${year}-${month}-${day}`;

    const planificationData: CreatePlanificationDto = {
      date: dateStr,
      heureDebut: planification.heureDebut || '08:00',
      heureFin: planification.heureFin || '09:00',
      description: this.getCleanDescription(planification.description) || '',
      tacheId: planification.tacheId!,
      projetId: planification.projetId!,
      listeId: nouvelEtat, // Utiliser le nouveau statut
      userId: this.currentUser.id
    };

    console.log('üì§ Cr√©ation d\'une planification pour t√¢che report√©e:', planificationData);

    this.planificationService.createPlanification(planificationData).subscribe({
      next: (nouvellePlanification) => {
        console.log('‚úÖ Planification cr√©√©e pour t√¢che report√©e:', nouvellePlanification);
        
        // Remplacer la planification temporaire par la vraie
        const index = this.planifications.findIndex(p => 
          p.tacheId === planification.tacheId && !p.id
        );
        
        if (index !== -1) {
          // Remplacer par la nouvelle planification avec ID
          this.planifications[index] = {
            ...nouvellePlanification,
            tache: planification.tache, // Garder les infos de la t√¢che
            projet: planification.projet // Garder les infos du projet
          };
        }
        
        this.toastrService.success(
          `T√¢che report√©e et statut chang√© vers "${this.getEtatLabel(nouvelEtat)}"`, 
          'Succ√®s'
        );
      },
      error: (error) => {
        console.error('‚ùå Erreur lors de la cr√©ation de la planification:', error);
        
        // Revenir en arri√®re en cas d'erreur
        planification.listeId = planification.listeId === nouvelEtat ? EtatListe.Todo : planification.listeId;
        
        this.toastrService.danger(
          'Erreur lors de la cr√©ation de la planification', 
          'Erreur'
        );
      }
         });
   }

  // üëë M√©thodes pour l'interface administrateur
  
  loadAllUsersForAdmin() {
    console.log('üëë Chargement de tous les utilisateurs pour l\'admin');
    
    // Charger les utilisateurs et leurs √©quipes
    forkJoin({
      users: this.utilisateurService.getUtilisateurs(),
      membres: this.membreEquipeService.getMembres()
    }).subscribe({
      next: (result) => {
        this.availableUsers = result.users;
        console.log('‚úÖ Utilisateurs charg√©s pour admin:', result.users.length);
        
        // Cr√©er le cache des √©quipes
        this.buildUserTeamsCache(result.membres);
        console.log('‚úÖ Cache des √©quipes cr√©√©:', this.userTeams.size, 'mappings');
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement des utilisateurs pour admin:', error);
        this.toastrService.danger('Erreur lors du chargement des utilisateurs', 'Erreur');
        
        // Fallback : charger seulement les utilisateurs
        this.utilisateurService.getUtilisateurs().subscribe({
          next: (users) => {
            this.availableUsers = users;
            console.log('‚úÖ Utilisateurs charg√©s (fallback):', users.length);
          },
          error: (fallbackError) => {
            console.error('‚ùå Erreur fallback:', fallbackError);
          }
        });
      }
    });
  }

  // üèóÔ∏è Construire le cache des √©quipes par utilisateur
  private buildUserTeamsCache(membres: any[]) {
    this.userTeams.clear();
    console.log('üèóÔ∏è Construction du cache des √©quipes avec', membres.length, 'membres');
    
    membres.forEach((membre, index) => {
      console.log(`üîç Membre ${index + 1}:`, JSON.stringify(membre, null, 2));
      
      // Essayer diff√©rentes propri√©t√©s pour l'ID utilisateur
      const userId = membre.utilisateurId || 
                    membre.UtilisateurId || 
                    (membre.utilisateur && membre.utilisateur.id);
      
      // Essayer diff√©rentes propri√©t√©s pour l'√©quipe
      const equipe = membre.equipe || 
                     membre.Equipe;
      
      console.log(`üîç UserId trouv√©:`, userId);
      console.log(`üîç √âquipe trouv√©e:`, equipe);
      
      if (userId && equipe) {
        const equipeNom = equipe.nom || equipe.Nom || equipe.name || '√âquipe inconnue';
        this.userTeams.set(userId, equipeNom);
        console.log(`‚úÖ Cache: Utilisateur ${userId} ‚Üí √âquipe "${equipeNom}"`);
      } else {
        console.log(`‚ùå Membre ignor√© - UserId: ${userId}, √âquipe: ${equipe ? 'pr√©sente' : 'manquante'}`);
        
        // Si on a un equipeId mais pas de nom, essayer de r√©cup√©rer le nom
        const equipeId = membre.equipeId || membre.EquipeId;
        if (userId && equipeId) {
          this.loadEquipeNameById(userId, equipeId);
        }
      }
    });
    
    console.log('üìä Cache final des √©quipes:', Array.from(this.userTeams.entries()));
    
    // Si aucune √©quipe n'a √©t√© trouv√©e, essayer une approche alternative
    if (this.userTeams.size === 0) {
      console.log('‚ö†Ô∏è Aucune √©quipe trouv√©e, tentative de r√©cup√©ration alternative...');
      this.loadUserTeamsAlternative();
    }
  }

  // üîÑ M√©thode alternative pour charger les √©quipes
  private loadUserTeamsAlternative() {
    console.log('üîÑ Chargement alternatif des √©quipes...');
    
    // R√©cup√©rer les √©quipes et les membres en parall√®le
    forkJoin({
      equipes: this.equipeService.getEquipes(),
      membres: this.membreEquipeService.getMembres()
    }).subscribe({
      next: (result) => {
        console.log('‚úÖ √âquipes r√©cup√©r√©es:', result.equipes);
        console.log('‚úÖ Membres r√©cup√©r√©s (alternative):', result.membres);
        
                 // Cr√©er un map des √©quipes par ID pour un acc√®s rapide
         const equipesMap = new Map();
         result.equipes.forEach(equipe => {
           equipesMap.set((equipe as any).idEquipe || equipe.id, equipe.nom);
         });
         
         console.log('üìã Map des √©quipes:', Array.from(equipesMap.entries()));
         
         // Mapper les utilisateurs avec leurs √©quipes
         result.membres.forEach(membre => {
           const userId = membre.utilisateurId;
           const equipeId = membre.equipeId || 
                           (membre.equipe && (membre.equipe as any).idEquipe);
          
          if (userId && equipeId) {
            const equipeNom = equipesMap.get(equipeId);
            if (equipeNom) {
              this.userTeams.set(userId, equipeNom);
              console.log(`‚úÖ Alternative: Utilisateur ${userId} ‚Üí √âquipe "${equipeNom}"`);
            }
          }
        });
        
        console.log('üìä Cache final apr√®s m√©thode alternative:', Array.from(this.userTeams.entries()));
      },
      error: (error) => {
        console.error('‚ùå Erreur lors du chargement alternatif:', error);
      }
    });
  }

  onUserSelectionChange(userId: number) {
    console.log('üëë Changement de s√©lection utilisateur:', userId);
    this.selectedUserId = userId;
    
    // Recharger les planifications pour l'utilisateur s√©lectionn√©
    this.loadPlanificationsByDate();
  }

  getCurrentViewUserId(): number {
    // Si admin et utilisateur s√©lectionn√©, retourner l'utilisateur s√©lectionn√©
    if (this.isAdmin && this.selectedUserId) {
      return this.selectedUserId;
    }
    // Sinon, retourner l'utilisateur connect√©
    return this.currentUser?.id || 0;
  }

  getSelectedUserName(): string {
    if (this.isAdmin && this.selectedUserId) {
      const selectedUser = this.availableUsers.find(u => u.id === this.selectedUserId);
      if (selectedUser) {
        return `${selectedUser.prenom} ${selectedUser.nom}`;
      }
    }
    return `${this.currentUser?.prenom || ''} ${this.currentUser?.nom || ''}`.trim();
  }

  // üë• M√©thodes pour la gestion des √©quipes et avatars

  getUserTeam(userId: number): string | null {
    const team = this.userTeams.get(userId);
    console.log(`üîç Recherche √©quipe pour utilisateur ${userId}:`, team);
    
    // Si l'√©quipe affiche "√âquipe X", essayer de r√©cup√©rer le vrai nom
    if (team && team.startsWith('√âquipe ') && /√âquipe \d+/.test(team)) {
      console.log(`üîß √âquipe avec ID d√©tect√©e: ${team}, recherche du vrai nom...`);
      const equipeId = parseInt(team.replace('√âquipe ', ''));
      
      // Chercher dans toutes les √©quipes disponibles
      this.equipeService.getEquipes().subscribe({
        next: (equipes) => {
          const equipe = equipes.find(e => (e as any).idEquipe === equipeId || (e as any).id === equipeId);
          if (equipe && equipe.nom) {
            this.userTeams.set(userId, equipe.nom);
            console.log(`‚úÖ Vrai nom d'√©quipe trouv√©: ${equipe.nom}`);
          }
        },
        error: (error) => {
          console.error(`‚ùå Erreur lors de la recherche d'√©quipe:`, error);
        }
      });
    }
    
    // Si pas d'√©quipe trouv√©e, essayer de la chercher directement
    if (!team && this.availableUsers.length > 0) {
      const user = this.availableUsers.find(u => u.id === userId);
      if (user) {
        console.log(`üîç Utilisateur trouv√©:`, user);
        // Essayer de r√©cup√©rer l'√©quipe depuis l'utilisateur si elle y est
        if ((user as any).equipe) {
          const equipeNom = (user as any).equipe.nom || (user as any).equipe.Nom;
          if (equipeNom) {
            this.userTeams.set(userId, equipeNom);
            console.log(`‚úÖ √âquipe trouv√©e via utilisateur: ${equipeNom}`);
            return equipeNom;
          }
        }
      }
    }
    
    return team || null;
  }

  getSelectedUserInitials(): string {
    if (this.isAdmin && this.selectedUserId) {
      const selectedUser = this.availableUsers.find(u => u.id === this.selectedUserId);
      if (selectedUser) {
        return this.getUserInitials(selectedUser);
      }
    }
    return this.getUserInitials(this.currentUser as any);
  }

  getSelectedUserTeam(): string | null {
    if (this.isAdmin && this.selectedUserId) {
      return this.getUserTeam(this.selectedUserId);
    }
    return this.currentUserEquipe?.nom || null;
  }

  // üîç R√©cup√©rer le nom d'une √©quipe par son ID
  private loadEquipeNameById(userId: number, equipeId: number) {
    console.log(`üîç Recherche du nom de l'√©quipe ${equipeId} pour l'utilisateur ${userId}`);
    
    this.equipeService.getEquipeForCrud(equipeId).subscribe({
      next: (equipe) => {
        if (equipe && equipe.nom) {
          this.userTeams.set(userId, equipe.nom);
          console.log(`‚úÖ Nom d'√©quipe r√©cup√©r√©: Utilisateur ${userId} ‚Üí √âquipe "${equipe.nom}"`);
        }
      },
      error: (error) => {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de l'√©quipe ${equipeId}:`, error);
      }
         });
   }

  // üé® M√©thode pour afficher le nom d'√©quipe de fa√ßon propre
  getDisplayTeamName(teamName: string | null): string {
    if (!teamName) return '';
    
    // Si c'est "√âquipe X", essayer de r√©cup√©rer le vrai nom
    if (teamName.startsWith('√âquipe ') && /√âquipe \d+/.test(teamName)) {
      // Pour l'instant, retourner un nom g√©n√©rique plus joli
      const equipeId = teamName.replace('√âquipe ', '');
      return `√âquipe #${equipeId}`; // Plus joli que "√âquipe 13"
    }
    
    return teamName;
  }

  
}    